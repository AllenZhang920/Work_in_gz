1.链接project的mk，mk主要赋值相关project的变量
2.clean之前的链接和pre-patched的patch
3.setup dir :/home/allen_zhang/testaldk/aldk_2014/build,tmp,gpl
4.下载更新/home/allen_zhang/testaldk/aldk_2014/openwrt
  下载更新/home/allen_zhang/testaldk/aldk_2014/openwrt/target/linux/brcm63xx 
  下载更新新/home/allen_zhang/testaldk/aldk_2014/feeds
5.拷贝openwrt到build目录下  ：cp -af /home/allen_zhang/testaldk/aldk_2014/openwrt/* /home/allen_zhang/testaldk/aldk_2014/build/
6.调用scripts/download-sources.sh从ftp://10.118.81.196/pub/sources把/home/allen_zhang/testaldk/aldk_2014/configs/cht/GG9016RWAC22-TC/openwrt-download-list.txt列表上的包下载到download文件夹里
7.下载arcadyan-utility包到download/arcadyan-utility-0.5 
8.Symbol link packages(symbol-link.sh),将feeds目录下的包链接到build/package/下
9.symbol-link-dl-openwrt.sh，将aldk_2014/download/下的包链接到build/dl
10.删除build/tmp；
   创建build/extern，build/extern/linux，build/extern/toolchain，build/extern/tools。
11.创建/extern/patches/，并拷贝vendor下的patch到该目录
12.customize-openwrt.sh build cht/GG9016RWAC22-TC/customize-openwrt-cht-GG9016RWAC22-TC.sh（最终是GG9016RWAC22-TC.sh build）
13.将相关project的config文件拷贝至build目录下的config和tool下
14.执行quick-build：cd到build目录下进行make操作





上图是openwrt目录结构，其中第一行是原始目录，第二行是编译过程中生成的目录。各目录的作用是：

tools - 编译时需要一些工具， tools里包含了获取和编译这些工具的命令。里面是一些Makefile，有的可能还有patch。每个Makefile里都有一句 $(eval $(call HostBuild))，表示编译这个工具是为了在主机上使用的。
toolchain - 包含一些命令去获取kernel headers, C library, bin-utils, compiler, debugger
target - 各平台在这个目录里定义了firmware和kernel的编译过程。
package - 包含针对各个软件包的Makefile。openwrt定义了一套Makefile模板，各软件参照这个模板定义了自己的信息，如软件包的版本、下载地址、编译方式、安装地址等。
include - openwrt的Makefile都存放在这里。
scripts - 一些perl脚本，用于软件包管理。
dl - 软件包下载后都放到这个目录里
build_dir - 软件包都解压到build_dir/里，然后在此编译
staging_dir - 最终安装目录。tools, toolchain被安装到这里，rootfs也会放到这里。
feeds - OpenWrt环境所需要的软件包套件
bin - 编译完成之后，firmware和各ipk会放到此目录下。