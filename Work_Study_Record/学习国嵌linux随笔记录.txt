1.普通ls,ll只显示非隐藏文件属性，不显示隐藏文件，加-a选项可以显示隐藏文件
2.vim是vi的升级版本，兼容vi
有命令行模式，插入模式，底行模式（：进入）。
3.tftp udp；
  ftp tcp;安全
  sftp ,ssh子集，更安全
4.
rpm
优点：安装简单
缺点：a.需要知道包名称，包位置；b.需要手动解决依赖包
yum
优点：自动解决包依赖和包版本
5.vim 是vi的升级版
6./etc/sudoers设置用户权限
7.gcc 
 -Wall：生成所有警告信息 
 -w：不生成任何警告信息



栈（高地址）
堆
BSS段
数据段
代码段（低地址）

堆：从低地址往高地址
栈：从高地址往低地址

在/proc/pid号/maps可以查看进程的各段地址内容

1.代码段：代码，全局常量（const）、字符串常量
2.数据段：全局变量（初始化以及未初始化的）、静态变量（全局的和局部的、初始化的以及未初始化的）
3.堆：动态分配的区域嵌入式Linux技术咨询QQ号: 550491596入式Linux学习交流QQ群: 65212116
4.栈：局部变量（初始化以及未初始化的，但不包含静态变量）、局部只读变量（const）



就绪 执行 阻塞

就绪 --> 执行（进程调度）
执行 --> 就绪 （时间片完）
执行 --> 阻塞  （IO请求）
阻塞 --> 就绪 （IO完成）

进程互斥：当若干进程都要使用某一个资源时，但该资源在同一时刻最多允许一个进程使用，这时其他进程必须等待，直到占用资源者释放该资源为止
操作系统中将同一时刻只允许一个 进程访问的资源称为临界资源
进程中访问临界资源的那段程序代码称为临界区。为实现对临界资源的互斥访问，应保证诸进程互斥地进入各自的临界区
进程同步：一组进程按照一定的顺序执行（生产者 消费者）

进程调度：
调度算法
调度时机：抢占式调度 ，非抢占式调度
死锁：多个进程因竞争资源而形成一种僵局， 导致这些进程都无法继续往前执行。
getpid() 返回进程pid




fork()和vfork()在使用方法上一致，有区别
1.fork（）:创建子进程，但不确保谁先执行；vfork():创建子进程，并阻塞父进程，所以先运行子进程，再运行父进程。
2.fork:不共享父进程的数据段，堆栈空间，有独立的地址空间；vfork：共享父进程数据段，堆栈空间

exit(n) 退出进程
wait(int *status)：用于父进程阻塞，直到一个子进程结束或者该进程收到一个指定信号为止
exec族：保持原来pid，但是相关的数据段，堆栈，代码会替换


 


Linux进程间通信（IPC：interprocesscommunication）

通讯的目的：
1、数据传输 
一个进程需要将数据发送给另一个进程
2、资源共享 
多个进程之间共享同样的资源。 
3、通知事件
一个进程需要向另一个/组进程发送消息，通知它们发生了某事件。 
4、进程控制 
有些进程希望完全控制另一个进程的执行（如Debug进程），此时 控制进程希望能够拦截另一个进程的所有操作，并能够及时知道它 的状态改变。



1.无名管道
2.有名管道
3.信号
4.消息队列
5.共享内存
6.信号量
7.套接字


无名管道：
1.只能用于有亲缘关系的进程之间的通信
2.半双工通信模式，具有固定的读端和写端
3.存在内核空间，使用read()和write()函数

父子进程无名管道通信：
一般是先建立无名管道-->fork()创建父子进程-->在父子进程其中一个关闭读端，一个关闭写端。



有名管道(FIFO文件)
对有名管 道的操作可以采用操作文件的方法，如使用 open,read,write等.

FIFO文件在使用上和普通文件有相似之处，但是也有 不同之处： 
1. 读取Fifo文件的进程只能以”RDONLY”方式打开 fifo文件。 
2. 写Fifo文件的进程只能以”WRONLY”方式打开fifo
3. Fifo文件里面的内容被读取后，就消失了。但是普 通文件里面的内容读取后还存在

实验：
1.先创建FIFO，使用mkfifo(“/tmp/myfifo”,0666){可以在写进程创建或者读进程创建都行，其实应该在任何地方都行，相当于建立一个特殊的文件，后面进行读写操作}
